
import org.junit.*; // JUnit4

import org.jmlspecs.utils.JmlAssertionError;




public class TS_TestAssign003 
 {

    static int nb_inconclusive = 0;
    static int nb_fail = 0;
    static int nb_err = 0;
 	
    public static void main(String args[]) {

         org.junit.runner.JUnitCore.main("TS_TestAssign003");
 
        System.out.println("inconclusive tests: "+TS_TestAssign003.nb_inconclusive+" -- failures : "+TS_TestAssign003.nb_fail+" -- errors : "+TS_TestAssign003.nb_err );
     }
		
    @Test
 	public void testSequence_1() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_3() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_4() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_5() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_6() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_7() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_8() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_9() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_10() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_11() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_12() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_13() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_14() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_15() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_16() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_17() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_18() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_19() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_20() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_21() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_22() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_23() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_24() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_25() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_26() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_27() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_28() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_29() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_30() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_31() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_32() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_33() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_34() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_35() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_36() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_37() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_38() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_39() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_40() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_41() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_42() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_43() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_44() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_45() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_46() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_47() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_48() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_49() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_50() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_51() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_52() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_53() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_54() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_55() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_56() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_57() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_58() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_59() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_60() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_61() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_62() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_63() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_64() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_65() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_66() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_67() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_68() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_69() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_70() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_71() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_72() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_73() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_74() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_75() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_76() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_77() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_78() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_79() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_80() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_81() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_82() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_83() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_84() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_85() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_86() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_87() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_88() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_89() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_90() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_91() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_92() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_93() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_94() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_95() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_96() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_97() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_98() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_99() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_100() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_101() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_102() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_103() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_104() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_105() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_106() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_107() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_108() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_109() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_110() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_111() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_112() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_113() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_114() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_115() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_116() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_117() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_118() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_119() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_120() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_121() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_122() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_123() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_124() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_125() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_126() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_127() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_128() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_129() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_130() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_131() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_132() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_133() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_134() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_135() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_136() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_137() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_138() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_139() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_140() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_141() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_142() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_143() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_144() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_145() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_146() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_147() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_148() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_149() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_150() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_151() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_152() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_153() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_154() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_155() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_156() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_157() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_158() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_159() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_160() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_161() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_162() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_163() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_164() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_165() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_166() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_167() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_168() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_169() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_170() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_171() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_172() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_173() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_174() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_175() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_176() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_177() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_178() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_179() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_180() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_181() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_182() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_183() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_184() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_185() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_186() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_187() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_188() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_189() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_190() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_191() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_192() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_193() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_194() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_195() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_196() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_197() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_198() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_199() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_200() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_201() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_202() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_203() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_204() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_205() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_206() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_207() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_208() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_209() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_210() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_211() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_212() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_213() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_214() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_215() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_216() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_217() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_218() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_219() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_220() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_221() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_222() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_223() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_224() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_225() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_226() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_227() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_228() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_229() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_230() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_231() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_232() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_233() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_234() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_235() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_236() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_237() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_238() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_239() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_240() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_241() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_242() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_243() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_244() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_245() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_246() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_247() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_248() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_249() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_250() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_251() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_252() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_253() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_254() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_255() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_256() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_257() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_258() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_259() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_260() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_261() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_262() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_263() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_264() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_265() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_266() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_267() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_268() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_269() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_270() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_271() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_272() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_273() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_274() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_275() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_276() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_277() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_278() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_279() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_280() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_281() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_282() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_283() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_284() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_285() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_286() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_287() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_288() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_289() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_290() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_291() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_292() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_293() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_294() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_295() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_296() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_297() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_298() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_299() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_300() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_301() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_302() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_303() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_304() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_305() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_306() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_307() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_308() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_309() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_310() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_311() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_312() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_313() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_314() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_315() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_316() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_317() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_318() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_319() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_320() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_321() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_322() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_323() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_324() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_325() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_326() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_327() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_328() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_329() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_330() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_331() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_332() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_333() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_334() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_335() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_336() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_337() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_338() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_339() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_340() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_341() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_342() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_343() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_344() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_345() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_346() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_347() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_348() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_349() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_350() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_351() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_352() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_353() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_354() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_355() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_356() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_357() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_358() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_359() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_360() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_361() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_362() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_363() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_364() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_365() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_366() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_367() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_368() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_369() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_370() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_371() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_372() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_373() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_374() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_375() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_376() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_377() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_378() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_379() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_380() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_381() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_382() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_383() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_384() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_385() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_386() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_387() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_388() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_389() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_390() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_391() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_392() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_393() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_394() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_395() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_396() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_397() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_398() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_399() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_400() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_401() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_402() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_403() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_404() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_405() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_406() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_407() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_408() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_409() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_410() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_411() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_412() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_413() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_414() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_415() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_416() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_417() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_418() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_419() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_420() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_421() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_422() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_423() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_424() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_425() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_426() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_427() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_428() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_429() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_430() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_431() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_432() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_433() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_434() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_435() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_436() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_437() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_438() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_439() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_440() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_441() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_442() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_443() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_444() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_445() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_446() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_447() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_448() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_449() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_450() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_451() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_452() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_453() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_454() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_455() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_456() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_457() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_458() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_459() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_460() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_461() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_462() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_463() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_464() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_465() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_466() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_467() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_468() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_469() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_470() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_471() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_472() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_473() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_474() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_475() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_476() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_477() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_478() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_479() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_480() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_481() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_482() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_483() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_484() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_485() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_486() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_487() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_488() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_489() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_490() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_491() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_492() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_493() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_494() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_495() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_496() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_497() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_498() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_499() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_500() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_501() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_502() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_503() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_504() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_505() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_506() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_507() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_508() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_509() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_510() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_511() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_512() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_513() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_514() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_515() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_516() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_517() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_518() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_519() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_520() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_521() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_522() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_523() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_524() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_525() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_526() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_527() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_528() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_529() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_530() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_531() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_532() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_533() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_534() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_535() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_536() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_537() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_538() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_539() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_540() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_541() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_542() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_543() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_544() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_545() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_546() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_547() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_548() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_549() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_550() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_551() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_552() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_553() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_554() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_555() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_556() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_557() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_558() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_559() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_560() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_561() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_562() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_563() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_564() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_565() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_566() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_567() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_568() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_569() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_570() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_571() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_572() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_573() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_574() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_575() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_576() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_577() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_578() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_579() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_580() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_581() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_582() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_583() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_584() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_585() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_586() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_587() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_588() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_589() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_590() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_591() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_592() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_593() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_594() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_595() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_596() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_597() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_598() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_599() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_600() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_601() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_602() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_603() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_604() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_605() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_606() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_607() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_608() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_609() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_610() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_611() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_612() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_613() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_614() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_615() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_616() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_617() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_618() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_619() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_620() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_621() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_622() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_623() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_624() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_625() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_626() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_627() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_628() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_629() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_630() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_631() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_632() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_633() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_634() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_635() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_636() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_637() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_638() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_639() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_640() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_641() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_642() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_643() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_644() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_645() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_646() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_647() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_648() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_649() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_650() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_651() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_652() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_653() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_654() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_655() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_656() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_657() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_658() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_659() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_660() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_661() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_662() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_663() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_664() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_665() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_666() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_667() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_668() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_669() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_670() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_671() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_672() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_673() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_674() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_675() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_676() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_677() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_678() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_679() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_680() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_681() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_682() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_683() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_684() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_685() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_686() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_687() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_688() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_689() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_690() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_691() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_692() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_693() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_694() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_695() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_696() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_697() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_698() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_699() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_700() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_701() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_702() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_703() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_704() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_705() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_706() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_707() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_708() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_709() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_710() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_711() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_712() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_713() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_714() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_715() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_716() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_717() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_718() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_719() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_720() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_721() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_722() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_723() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_724() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_725() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_726() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_727() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_728() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_729() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_730() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_731() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_732() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_733() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_734() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_735() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_736() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_737() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_738() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_739() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_740() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_741() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_742() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_743() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_744() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_745() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_746() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_747() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_748() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_749() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_750() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_751() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_752() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_753() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_754() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_755() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_756() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_757() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_758() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_759() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_760() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_761() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_762() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_763() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_764() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_765() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_766() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_767() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_768() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_769() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_770() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_771() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_772() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_773() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_774() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_775() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_776() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_777() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_778() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_779() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_780() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_781() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_782() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_783() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_784() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_785() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_786() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_787() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_788() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_789() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_790() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_791() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_792() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_793() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_794() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_795() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_796() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_797() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_798() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_799() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_800() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_801() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_802() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_803() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_804() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_805() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_806() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_807() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_808() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_809() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_810() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_811() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_812() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_813() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_814() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_815() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_816() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_817() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_818() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_819() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_820() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_821() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_822() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_823() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_824() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_825() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_826() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_827() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_828() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_829() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_830() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_831() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_832() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_833() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_834() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_835() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_836() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_837() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_838() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_839() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_840() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_841() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_842() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_843() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_844() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_845() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_846() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_847() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_848() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_849() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_850() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_851() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_852() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_853() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_854() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_855() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_856() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_857() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_858() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_859() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_860() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_861() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_862() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_863() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_864() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_865() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_866() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_867() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_868() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_869() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_870() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_871() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_872() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_873() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_874() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_875() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_876() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_877() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_878() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_879() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_880() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_881() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_882() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_883() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_884() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_885() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_886() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_887() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_888() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_889() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_890() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_891() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_892() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_893() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_894() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_895() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_896() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_897() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_898() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_899() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_900() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_901() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_902() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_903() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_904() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_905() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_906() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_907() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_908() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_909() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_910() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_911() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_912() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_913() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_914() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_915() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_916() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_917() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_918() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_919() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_920() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_921() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_922() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_923() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_924() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_925() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_926() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_927() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_928() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_929() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_930() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_931() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_932() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_933() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_934() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_935() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_936() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_937() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_938() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_939() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_940() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_941() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_942() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_943() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_944() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_945() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_946() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_947() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_948() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_949() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_950() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_951() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_952() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_953() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_954() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_955() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_956() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_957() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_958() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_959() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_960() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_961() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_962() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_963() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_964() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_965() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_966() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_967() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_968() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_969() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_970() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_971() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_972() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_973() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_974() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_975() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_976() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_977() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_978() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_979() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_980() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_981() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_982() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_983() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_984() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_985() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_986() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_987() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_988() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_989() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_990() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_991() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_992() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_993() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_994() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_995() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_996() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_997() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_998() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_999() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1000() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1001() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1002() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1003() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1004() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1005() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1006() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1007() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1008() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1009() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1010() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1011() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1012() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1013() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1014() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1015() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1016() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1017() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1018() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1019() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1020() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1021() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1022() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1023() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1024() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1025() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1026() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1027() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1028() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1029() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1030() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1031() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1032() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1033() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1034() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1035() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1036() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1037() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1038() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1039() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1040() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1041() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1042() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1043() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1044() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1045() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1046() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1047() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1048() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1049() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1050() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1051() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1052() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1053() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1054() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1055() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1056() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1057() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1058() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1059() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1060() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1061() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1062() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1063() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1064() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1065() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1066() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1067() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1068() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1069() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1070() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1071() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1072() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1073() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1074() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1075() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1076() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1077() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1078() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1079() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1080() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1081() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1082() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1083() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1084() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1085() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1086() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1087() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1088() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1089() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1090() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1091() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1092() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1093() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1094() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1095() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1096() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1097() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1098() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1099() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1100() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1101() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1102() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1103() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1104() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1105() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1106() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1107() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1108() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1109() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1110() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1111() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1112() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1113() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1114() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1115() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1116() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1117() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1118() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1119() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1120() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1121() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1122() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1123() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1124() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1125() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1126() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1127() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1128() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1129() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1130() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1131() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1132() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1133() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1134() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1135() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1136() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1137() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1138() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1139() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1140() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1141() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1142() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1143() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1144() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1145() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1146() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1147() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1148() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1149() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1150() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1151() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1152() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1153() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1154() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1155() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1156() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1157() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1158() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1159() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1160() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1161() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1162() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1163() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1164() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1165() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1166() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1167() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1168() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1169() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1170() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1171() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1172() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1173() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1174() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1175() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1176() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1177() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1178() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1179() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1180() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1181() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1182() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1183() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1184() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1185() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1186() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1187() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1188() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1189() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1190() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1191() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1192() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1193() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1194() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1195() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1196() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1197() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1198() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1199() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1200() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1201() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1202() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1203() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1204() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1205() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1206() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1207() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1208() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1209() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1210() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1211() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1212() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1213() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1214() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1215() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1216() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1217() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1218() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1219() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1220() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1221() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1222() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1223() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1224() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1225() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1226() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1227() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1228() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1229() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1230() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1231() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1232() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1233() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1234() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1235() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1236() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1237() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1238() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1239() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1240() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1241() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1242() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1243() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1244() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1245() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1246() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1247() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1248() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1249() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1250() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1251() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1252() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1253() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1254() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1255() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1256() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1257() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1258() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1259() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1260() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1261() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1262() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1263() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1264() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1265() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1266() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1267() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1268() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1269() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1270() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1271() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1272() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1273() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1274() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1275() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1276() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1277() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1278() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1279() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1280() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1281() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1282() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1283() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1284() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1285() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1286() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1287() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1288() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1289() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1290() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1291() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1292() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1293() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1294() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1295() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1296() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1297() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1298() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1299() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1300() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1301() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1302() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1303() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1304() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1305() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1306() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1307() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1308() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1309() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1310() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1311() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1312() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1313() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1314() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1315() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1316() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1317() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1318() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1319() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1320() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1321() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1322() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1323() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1324() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1325() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1326() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1327() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1328() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1329() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1330() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1331() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1332() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1333() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1334() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1335() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1336() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1337() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1338() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1339() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1340() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1341() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1342() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1343() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1344() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1345() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1346() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1347() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1348() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1349() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1350() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1351() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1352() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1353() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1354() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1355() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1356() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1357() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1358() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1359() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1360() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1361() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1362() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1363() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1364() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1365() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1366() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1367() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1368() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1369() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1370() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1371() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1372() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1373() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1374() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1375() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1376() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1377() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1378() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1379() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1380() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1381() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1382() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1383() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1384() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1385() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1386() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1387() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1388() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1389() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1390() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1391() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1392() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1393() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1394() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1395() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1396() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1397() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1398() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1399() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1400() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1401() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1402() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1403() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1404() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1405() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1406() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1407() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1408() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1409() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1410() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1411() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1412() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1413() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1414() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1415() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1416() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1417() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1418() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1419() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1420() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1421() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1422() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1423() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1424() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1425() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1426() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1427() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1428() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1429() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1430() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1431() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1432() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1433() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1434() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1435() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1436() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1437() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1438() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1439() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1440() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1441() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1442() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1443() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1444() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1445() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1446() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1447() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1448() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1449() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1450() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1451() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1452() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1453() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1454() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1455() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1456() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1457() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1458() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1459() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1460() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1461() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1462() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1463() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1464() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1465() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1466() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1467() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1468() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1469() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1470() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1471() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1472() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1473() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1474() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1475() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1476() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1477() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1478() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1479() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1480() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1481() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1482() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1483() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1484() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1485() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1486() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1487() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1488() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1489() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1490() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1491() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1492() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1493() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1494() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1495() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1496() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1497() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1498() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1499() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1500() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1501() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1502() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1503() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1504() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1505() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1506() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1507() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1508() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1509() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1510() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1511() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1512() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1513() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1514() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1515() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1516() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1517() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1518() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1519() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1520() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1521() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1522() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1523() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1524() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1525() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1526() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1527() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1528() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1529() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1530() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1531() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1532() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1533() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1534() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1535() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1536() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1537() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1538() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1539() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1540() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1541() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1542() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1543() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1544() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1545() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1546() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1547() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1548() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1549() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1550() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1551() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1552() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1553() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1554() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1555() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1556() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1557() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1558() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1559() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1560() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1561() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1562() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1563() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1564() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1565() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1566() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1567() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1568() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1569() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1570() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1571() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1572() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1573() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1574() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1575() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1576() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1577() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1578() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1579() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1580() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1581() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1582() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1583() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1584() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1585() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1586() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1587() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1588() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1589() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1590() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1591() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1592() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1593() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1594() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1595() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1596() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1597() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1598() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1599() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1600() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1601() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1602() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1603() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1604() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1605() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1606() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1607() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1608() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1609() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1610() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1611() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1612() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1613() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1614() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1615() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1616() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1617() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1618() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1619() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1620() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1621() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1622() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1623() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1624() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1625() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1626() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1627() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1628() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1629() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1630() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1631() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1632() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1633() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1634() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1635() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1636() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1637() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1638() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1639() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1640() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1641() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1642() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1643() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1644() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1645() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1646() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1647() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1648() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1649() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1650() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1651() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1652() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1653() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1654() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1655() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1656() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1657() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1658() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1659() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1660() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1661() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1662() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1663() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1664() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1665() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1666() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1667() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1668() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1669() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1670() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1671() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1672() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1673() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1674() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1675() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1676() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1677() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1678() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1679() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1680() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1681() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1682() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1683() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1684() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1685() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1686() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1687() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1688() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1689() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1690() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1691() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1692() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1693() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1694() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1695() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1696() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1697() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1698() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1699() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1700() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1701() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1702() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1703() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1704() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1705() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1706() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1707() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1708() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1709() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1710() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1711() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1712() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1713() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1714() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1715() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1716() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1717() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1718() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1719() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1720() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1721() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1722() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1723() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1724() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1725() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1726() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1727() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1728() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1729() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1730() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1731() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1732() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1733() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1734() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1735() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1736() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1737() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1738() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1739() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1740() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1741() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1742() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1743() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1744() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1745() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1746() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1747() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1748() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1749() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1750() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1751() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1752() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1753() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1754() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1755() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1756() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1757() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1758() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1759() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1760() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1761() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1762() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1763() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1764() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1765() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1766() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1767() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1768() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1769() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1770() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1771() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1772() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1773() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1774() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1775() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1776() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1777() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1778() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1779() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1780() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1781() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1782() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1783() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1784() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1785() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1786() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1787() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1788() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1789() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1790() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1791() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1792() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1793() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1794() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1795() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1796() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1797() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1798() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1799() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1800() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1801() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1802() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1803() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1804() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1805() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1806() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1807() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1808() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1809() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1810() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1811() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1812() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1813() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1814() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1815() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1816() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1817() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1818() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1819() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1820() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1821() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1822() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1823() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1824() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1825() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1826() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1827() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1828() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1829() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1830() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1831() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1832() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1833() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1834() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1835() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1836() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1837() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1838() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1839() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1840() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1841() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1842() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1843() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1844() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1845() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1846() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1847() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1848() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1849() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1850() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1851() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1852() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1853() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1854() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1855() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1856() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1857() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1858() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1859() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1860() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1861() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1862() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1863() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1864() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1865() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1866() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1867() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1868() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1869() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1870() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1871() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1872() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1873() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1874() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1875() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1876() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1877() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1878() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1879() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1880() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1881() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1882() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1883() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1884() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1885() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1886() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1887() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1888() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1889() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1890() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1891() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1892() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1893() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1894() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1895() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1896() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1897() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1898() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1899() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1900() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1901() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1902() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1903() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1904() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1905() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1906() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1907() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1908() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1909() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1910() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1911() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1912() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1913() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1914() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1915() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1916() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1917() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1918() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1919() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1920() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1921() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1922() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1923() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1924() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1925() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1926() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1927() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1928() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1929() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1930() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1931() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1932() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1933() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1934() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1935() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1936() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1937() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1938() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1939() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1940() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1941() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1942() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1943() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1944() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1945() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1946() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1947() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1948() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1949() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1950() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1951() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1952() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1953() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1954() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1955() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1956() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1957() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1958() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1959() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1960() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1961() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1962() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1963() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1964() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1965() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1966() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1967() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1968() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1969() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1970() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1971() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1972() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1973() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1974() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1975() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1976() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1977() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1978() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1979() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1980() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1981() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1982() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1983() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1984() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1985() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1986() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1987() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1988() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1989() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1990() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1991() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1992() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1993() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1994() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1995() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1996() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1997() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1998() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_1999() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2000() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2001() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2002() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2003() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2004() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2005() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2006() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2007() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2008() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2009() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2010() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2011() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2012() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2013() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2014() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2015() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2016() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2017() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2018() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2019() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2020() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2021() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2022() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2023() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2024() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2025() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2026() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2027() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2028() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2029() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2030() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2031() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2032() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2033() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2034() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2035() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2036() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2037() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2038() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2039() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2040() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2041() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2042() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2043() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2044() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2045() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2046() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2047() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2048() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2049() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2050() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2051() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2052() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2053() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2054() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2055() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2056() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2057() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2058() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2059() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2060() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2061() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2062() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2063() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2064() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2065() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2066() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2067() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2068() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2069() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2070() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2071() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2072() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2073() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2074() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2075() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2076() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2077() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2078() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2079() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2080() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2081() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2082() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2083() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2084() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2085() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2086() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2087() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2088() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      e.add_assign("Bart2","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2089() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2090() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2091() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2092() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2093() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2094() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2095() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2096() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2097() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2098() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2099() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2100() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod2") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2101() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2102() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2103() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2104() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2105() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2106() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2107() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod1") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2108() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod2") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

    @Test
 	public void testSequence_2109() 
 throws Exception{ org.jmlspecs.utils.Utils.useExceptions = true;
 
try{  Explosives e = new Explosives()  ;
     e.add_assign("Bat1","Prod1") ;
      e.add_assign("Bat1","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
    e.add_assign("Bart2","Prod2") ;
      e.add_assign("Bart2","Prod1") ;
    e.add_assign("Bat1","Prod3") ;
      } 
		catch(JmlAssertionError.PreconditionEntry e$){System.out.println("\n INCONCLUSIVE "+(new Exception().getStackTrace()[0].getMethodName())+ "\n\t "+ e$.getMessage());
                               TS_TestAssign003.nb_inconclusive++;}
	catch(JmlAssertionError e$){
// test failure	
			TS_TestAssign003.nb_fail++;

         org.junit.Assert.fail("\n\t " +e$.getClass()+"\n\t " + e$.getMessage());
 		
	}
	 catch (Exception e) {TS_TestAssign003.nb_err++;
	
		throw e;
	   }   

			
  	}

}
